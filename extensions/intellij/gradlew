#!/bin/sh

#
# 版权所有 © 2015-2021 原作者。
#
# 根据 Apache 许可证 2.0 版（“许可证”）授权；
# 除非遵循许可证，否则不得使用此文件。
# 您可以在以下网址获取许可证副本：
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# 除非适用法律要求或书面同意，按“原样”分发的软件，
# 不提供任何明示或暗示的担保或条件。
# 请参阅许可证以了解管理权限和限制的具体语言。
#

##############################################################################
#
#   由 Gradle 生成的 POSIX 启动脚本。
#
#   运行的重要事项：
#
#   (1) 您需要一个符合 POSIX 的 shell 来运行此脚本。如果您的 /bin/sh
#       不符合标准，但您有其他符合标准的 shell，例如 ksh 或 bash，
#       那么要运行此脚本，请在整个命令行前输入该 shell 名称，如：
#
#           ksh Gradle
#
#       Busybox 和类似的精简 shell 将无法工作，因为此脚本
#       需要所有这些 POSIX shell 功能：
#         * 函数；
#         * 扩展 «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», 和 «$( cmd )»；
#         * 具有可测试退出状态的复合命令，尤其是 «case»；
#         * 各种内置命令，包括 «command», «set», 和 «ulimit»。
#
#   修补的重要事项：
#
#   (2) 此脚本针对任何 POSIX shell，因此避免使用 Bash、Ksh 等提供的扩展；
#       特别是避免使用数组。
#
#       将多个参数打包到一个以空格分隔的字符串中的“传统”做法是
#       一个众所周知的错误和安全问题的来源，因此（大部分）避免了这种做法，
#       通过在 "$@" 中逐步累积选项，最终将其传递给 Java。
#
#       继承的环境变量（DEFAULT_JVM_OPTS, JAVA_OPTS,
#       和 GRADLE_OPTS）依赖于单词拆分，这在代码中显式执行；
#       详情请参阅内联注释。
#
#       针对特定操作系统（如 AIX、CygWin、Darwin、MinGW 和 NonStop）进行了调整。
#
#   (3) 此脚本是从 Groovy 模板生成的
#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       在 Gradle 项目中。
#
#       您可以在 https://github.com/gradle/gradle/ 找到 Gradle。
#
##############################################################################

# 尝试设置 APP_HOME

# 解析链接：$0 可能是一个链接
app_path=$0

# 需要这个来处理链式符号链接。
while
    APP_HOME=${app_path%"${app_path##*/}"}  # 保留一个尾随 /；如果没有前导路径则为空
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# 这通常不使用
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# 丢弃 cd 标准输出以防 $CDPATH 被设置 (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd "${APP_HOME:-./}" > /dev/null && pwd -P ) || exit

# 使用最大可用值，或设置 MAX_FD != -1 以使用该值。
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# 操作系统特定支持（必须为 'true' 或 'false'）。
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# 确定用于启动 JVM 的 Java 命令。
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM 的 JDK 在 AIX 上使用奇怪的位置存放可执行文件
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "错误：JAVA_HOME 设置为无效目录：$JAVA_HOME

请在您的环境中设置 JAVA_HOME 变量以匹配
Java 安装的位置。"
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "错误：JAVA_HOME 未设置且在您的 PATH 中找不到 'java' 命令。

请在您的环境中设置 JAVA_HOME 变量以匹配
Java 安装的位置。"
    fi
fi

# 如果可以，增加最大文件描述符。
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # 在 POSIX sh 中，ulimit -H 是未定义的。这就是为什么要检查结果以查看它是否有效。
        # shellcheck disable=SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "无法查询最大文件描述符限制"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # 在 POSIX sh 中，ulimit -n 是未定义的。这就是为什么要检查结果以查看它是否有效。
        # shellcheck disable=SC3045
        ulimit -n "$MAX_FD" ||
            warn "无法将最大文件描述符限制设置为 $MAX_FD"
    esac
fi

# 收集用于 java 命令的所有参数，按逆序堆叠：
#   * 来自命令行的参数
#   * 主类名称
#   * -classpath
#   * -D...appname 设置
#   * --module-path（仅在需要时）
#   * DEFAULT_JVM_OPTS, JAVA_OPTS 和 GRADLE_OPTS 环境变量。

# 对于 Cygwin 或 MSYS，在运行 java 之前将路径切换为 Windows 格式
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # 现在转换参数 - 限制我们自己使用 /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # 不要处理选项 #(
              /?*)  t=${arg#/} t=/${t%%/*}              # 看起来像 POSIX 文件路径
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # 将参数列表滚动正好与参数数量相同的次数，因此每个参数最终回到其开始的位置，但可能已被修改。
        #
        # 注意：`for` 循环在开始之前捕获其迭代列表，因此在此更改位置参数既不影响迭代次数，也不影响在 `arg` 中呈现的值。
        shift                   # 移除旧参数
        set -- "$@" "$arg"      # 推送替换参数
    done
fi


# 在此处添加默认 JVM 选项。您还可以使用 JAVA_OPTS 和 GRADLE_OPTS 将 JVM 选项传递给此脚本。
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# 收集用于 java 命令的所有参数；
#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS 和 $GRADLE_OPTS 可以包含片段
#     shell 脚本，包括引号和变量替换，因此将它们放在
#     双引号中以确保它们被重新扩展；并且
#   * 将其他所有内容放在单引号中，以便不重新扩展。

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# 当 "xargs" 不可用时停止。
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs 不可用"
fi

# 使用 "xargs" 解析带引号的参数。
#
# 使用 -n1 它输出每行一个参数，去掉引号和反斜杠。
#
# 在 Bash 中我们可以简单地这样做：
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# 但 POSIX shell 既没有数组也没有命令替换，因此我们
# 后处理每个参数（作为 sed 的输入行）以反斜杠转义任何
# 可能是 shell 元字符的字符，然后使用 eval 反转
# 该过程（同时保持参数之间的分隔），并将
# 整个过程包装为一个单一的 "set" 语句。
#
# 当然，如果这些变量中的任何一个包含换行符或
# 不匹配的引号，这将会中断。
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
