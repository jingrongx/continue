{
  "title": "config.json",
  "$ref": "#/definitions/SerializedContinueConfig",
  "definitions": {
    "BaseCompletionOptions": {
      "title": "BaseCompletionOptions",
      "type": "object",
      "properties": {
        "stream": {
          "title": "Stream",
          "description": "是否流式传输LLM响应。目前仅由'anthropic'提供商支持。否则将始终流式传输。",
          "type": "boolean",
          "default": true
        },
        "temperature": {
          "title": "Temperature",
          "description": "完成的温度。",
          "type": "number"
        },
        "topP": {
          "title": "Top P",
          "description": "完成的topP。",
          "type": "number"
        },
        "topK": {
          "title": "Top K",
          "description": "完成的topK。",
          "type": "integer"
        },
        "presencePenalty": {
          "title": "Presence Penalty",
          "description": "完成的存在惩罚。",
          "type": "number"
        },
        "frequencePenalty": {
          "title": "Frequency Penalty",
          "description": "完成的频率惩罚。",
          "type": "number"
        },
        "mirostat": {
          "title": "Mirostat",
          "description": "启用Mirostat采样，在文本生成过程中控制困惑度（默认：0，0 = 禁用，1 = Mirostat，2 = Mirostat 2.0）。仅适用于Ollama、LM Studio和llama.cpp提供商",
          "type": "number"
        },
        "stop": {
          "title": "Stop",
          "description": "完成的停止标记。",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxTokens": {
          "title": "Max Tokens",
          "description": "生成的最大标记数。",
          "default": 600,
          "type": "integer"
        },
        "numThreads": {
          "title": "Number of threads",
          "description": "生成过程中使用的线程数。仅适用于Ollama（这是num_thread参数）",
          "type": "integer"
        },
        "keepAlive": {
          "title": "Ollama keep_alive",
          "description": "在没有请求后卸载模型的秒数。默认为60*30 = 30分钟",
          "type": "integer"
        }
      }
    },
    "ClientCertificateOptions": {
      "title": "ClientCertificateOptions",
      "type": "object",
      "properties": {
        "cert": {
          "title": "Cert Path",
          "description": "客户端证书文件的路径",
          "type": "string"
        },
        "key": {
          "title": "Key Path",
          "description": "客户端证书密钥文件的路径",
          "type": "string"
        },
        "passphrase": {
          "title": "Passphrase",
          "description": "客户端证书密钥文件的密码",
          "type": "string"
        }
      },
      "required": [
        "cert",
        "key"
      ]
    },
    "RequestOptions": {
      "title": "RequestOptions",
      "type": "object",
      "properties": {
        "timeout": {
          "title": "Timeout",
          "description": "为每个请求设置超时时间。如果您正在运行一个需要较长时间响应的本地LLM，您可能需要设置此项以避免超时。",
          "default": 7200,
          "type": "integer"
        },
        "verifySsl": {
          "title": "Verify Ssl",
          "description": "是否验证请求的SSL证书。",
          "type": "boolean"
        },
        "caBundlePath": {
          "title": "Ca Bundle Path",
          "description": "进行HTTP请求时使用的自定义CA包路径",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "proxy": {
          "title": "Proxy",
          "description": "进行HTTP请求时使用的代理URL",
          "type": "string"
        },
        "headers": {
          "title": "Headers",
          "description": "进行HTTP请求时使用的头信息",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "extraBodyProperties": {
          "title": "Extra Body Properties",
          "description": "在进行HTTP请求时将与主体合并的对象",
          "type": "object"
        },
        "noProxy": {
          "title": "No Proxy",
          "description": "Continue不应使用requestOptions.proxy中指定的代理的主机名列表",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clientCertificate": {
          "title": "Client Certificate",
          "description": "进行HTTP请求时使用的客户端证书",
          "$ref": "#/definitions/ClientCertificateOptions"
        }
      }
    },
    "ModelDescription": {
      "title": "ModelDescription",
      "type": "object",
      "properties": {
        "title": {
          "title": "Title",
          "description": "您希望为模型命名的标题。",
          "type": "string"
        },
        "provider": {
          "title": "Provider",
          "description": "模型的提供商。这用于确定模型的类型以及如何与之交互。",
          "enum": [
            "openai",
            "free-trial",
            "anthropic",
            "cohere",
            "bedrock",
            "bedrockimport",
            "sagemaker",
            "together",
            "ollama",
            "huggingface-tgi",
            "huggingface-inference-api",
            "llama.cpp",
            "replicate",
            "gemini",
            "lmstudio",
            "llamafile",
            "mistral",
            "deepinfra",
            "groq",
            "fireworks",
            "cloudflare",
            "deepseek",
            "azure",
            "msty",
            "watsonx",
            "openrouter",
            "sambanova",
            "nvidia",
            "vllm"
          ],
          "markdownEnumDescriptions": [
            "### OpenAI\n使用gpt-4, gpt-3.5-turbo或任何其他OpenAI模型。请参阅[此处](https://openai.com/product#made-for-developers)获取API密钥。\n\n> [参考](https://docs.continue.dev/reference/Model%20Providers/openai)",
            "### 免费试用\n新用户可以使用代理服务器免费试用Continue，该服务器安全地使用我们的API密钥调用OpenAI。如果您准备好使用自己的API密钥或已使用完所有250次免费使用，您可以在config.json中输入您的API密钥，或选择其他模型提供商。\n> [参考](https://docs.continue.dev/reference/Model%20Providers/freetrial)",
            "### Anthropic\n要开始使用Anthropic模型，您首先需要在[此处](https://claude.ai/login)注册开放测试版以获取API密钥。\n> [参考](https://docs.continue.dev/reference/Model%20Providers/anthropicllm)",
            "### Cohere\n要使用Cohere，请访问[Cohere仪表板](https://dashboard.cohere.com/api-keys)创建API密钥。\n\n> [参考](https://docs.continue.dev/reference/Model%20Providers/cohere)",
            "### Bedrock\n要开始使用Bedrock，您需要在AWS上注册[此处](https://aws.amazon.com/bedrock)",
            "### Bedrock导入模型\n要开始使用Bedrock，您需要在AWS上注册[此处](https://aws.amazon.com/bedrock)",
            "### Sagemaker\nSagemaker是AWS的机器学习平台。",
            "### Together\nTogether是一个托管服务，提供开源语言模型的极快流式传输。要开始使用Together：\n1. 从[此处](https://together.ai)获取API密钥\n2. 粘贴在下面\n3. 选择一个模型预设\n> [参考](https://docs.continue.dev/reference/Model%20Providers/togetherllm)",
            "### Ollama\n要开始使用Ollama，请按照以下步骤操作：\n1. 从[ollama.ai](https://ollama.ai/)下载并打开应用程序\n2. 打开终端并运行`ollama run <MODEL_NAME>`。示例模型名称为`codellama:7b-instruct`或`llama2:7b-text`。您可以在[此处](https://ollama.ai/library)找到完整列表。\n3. 确保步骤2中使用的模型名称与config.json中的名称相同（例如`model=\"codellama:7b-instruct\"`）\n4. 一旦模型下载完成，您就可以开始通过Continue提问。\n> [参考](https://docs.continue.dev/reference/Model%20Providers/ollama)",
            "### Huggingface TGI\n\n> [参考](https://docs.continue.dev/reference/Model%20Providers/huggingfacetgi)",
            "### Huggingface推理API\n\n> [参考](https://docs.continue.dev/reference/Model%20Providers/huggingfaceinferenceapi)",
            "### Llama.cpp\nllama.cpp带有一个[内置服务器](https://github.com/ggerganov/llama.cpp/tree/master/examples/server#llamacppexampleserver)，可以从源代码运行。要做到这一点：\n\n1. 使用`git clone https://github.com/ggerganov/llama.cpp`克隆存储库。\n2. `cd llama.cpp`\n3. 运行`make`以构建服务器。\n4. 下载您想使用的模型并将其放在`llama.cpp/models`目录中（找到模型的最佳位置是[The Bloke on HuggingFace](https://huggingface.co/TheBloke)）\n5. 使用以下命令运行llama.cpp服务器（替换为您下载的模型）：\n\n```shell\n.\\server.exe -c 4096 --host 0.0.0.0 -t 16 --mlock -m models/codellama-7b-instruct.Q8_0.gguf\n```\n\n启动并运行后，您可以开始使用Continue。\n> [参考](https://docs.continue.dev/reference/Model%20Providers/llamacpp)",
            "### Replicate\nReplicate是一个托管服务，使运行ML模型变得容易。要开始使用Replicate：\n1. 从[此处](https://replicate.com)获取API密钥\n2. 粘贴在下面\n3. 选择一个模型预设\n> [参考](https://docs.continue.dev/reference/Model%20Providers/replicatellm)",
            "### Gemini API\n要开始使用Google Makersuite，请从[此处](https://makersuite.google.com)获取您的API密钥并粘贴在下面。\n> [参考](https://docs.continue.dev/reference/Model%20Providers/geminiapi)",
            "### LMStudio\nLMStudio提供了一个专业且设计精良的GUI，用于探索、配置和服务LLM。它在Mac和Windows上均可用。要开始：\n1. 从[lmstudio.ai](https://lmstudio.ai/)下载并打开应用程序\n2. 从LMStudio的主屏幕搜索并下载所需的模型。\n3. 在左侧栏中，单击'<->'图标以打开本地推理服务器并按“启动服务器”。\n4. 一旦您的模型加载完毕并且服务器已启动，您就可以开始使用Continue。\n> [参考](https://docs.continue.dev/reference/Model%20Providers/lmstudio)",
            "### Llamafile\n要开始使用llamafiles，请在他们的[GitHub repo](https://github.com/Mozilla-Ocho/llamafile#binary-instructions)上找到并下载二进制文件。然后使用以下命令运行它：\n\n```shell\nchmod +x ./llamafile\n./llamafile\n```\n> [参考](https://docs.continue.dev/reference/Model%20Providers/llamafile)",
            "### Mistral API\n\n要访问Mistral API，请从[Mistral平台](https://docs.mistral.ai/)获取您的API密钥",
            "### DeepInfra\n\n> [参考](https://docs.continue.dev/reference/Model%20Providers/deepinfra)",
            "### Groq\nGroq提供开源语言模型的极快推理。要开始，请从[他们的控制台](https://console.groq.com/keys)获取API密钥。",
            "### Fireworks\nFireworks是开源语言模型的快速推理引擎。要开始，请从[他们的控制台](https://fireworks.ai/api-keys)获取API密钥。",
            "### Cloudflare Workers AI\n\n[参考](https://developers.cloudflare.com/workers-ai/)",
            "### Deepseek\n Deepseek的API为其最先进的Deepseek Coder模型提供最佳定价。要开始，请从[他们的控制台](https://platform.deepseek.com/api_keys)获取API密钥",
            "### Azure OpenAI\n Azure OpenAI允许您在Azure上安全地运行OpenAI的模型。要开始，请按照[此处](https://docs.continue.dev/reference/Model%20Providers/azure)的步骤操作",
            "### Msty\nMsty是最简单的方式在所有桌面平台上启动在线或本地LLM - Windows、Mac和Linux。无需麻烦，一键即可启动。要开始，请按照以下步骤操作：\n1. 从[Msty.app](https://msty.app/)下载，打开应用程序，然后单击“设置本地AI”。\n2. 转到本地AI模块页面并下载您选择的模型。\n3. 一旦模型下载完成，您就可以开始通过Continue提问。\n> [参考](https://continue.dev/docs/reference/Model%20Providers/Msty)",
            "### IBM watsonx\nwatsonx由IBM开发，提供多种预训练的AI基础模型，可用于自然语言处理（NLP）、计算机视觉和语音识别任务。",
            "### OpenRouter\nOpenRouter提供一个单一的API来访问几乎任何语言模型。要开始，请从[他们的控制台](https://openrouter.ai/settings/keys)获取API密钥。",
            "### NVIDIA NIMs\nNVIDIA提供一个单一的API来访问几乎任何语言模型。要了解更多，请访问[LLM APIs文档](https://docs.api.nvidia.com/nim/reference/llm-apis)。\n有关获取密钥的具体信息，请查看[此处的文档](https://docs.nvidia.com/nim/large-language-models/latest/getting-started.html#option-1-from-api-catalog)",
            "### vLLM\nvLLM是为团队托管LLM的高性能方式。要开始，请按照他们的[快速入门](https://docs.vllm.ai/en/latest/getting_started/quickstart.html)设置您的服务器。"
          ],
          "type": "string"
        },
        "model": {
          "title": "Model",
          "description": "模型的名称。用于自动检测提示模板。",
          "type": "string"
        },
        "apiKey": {
          "title": "Api Key",
          "description": "OpenAI、Anthropic、Cohere、Together或其他API密钥",
          "type": "string"
        },
        "apiBase": {
          "title": "Api Base",
          "description": "LLM API的基本URL。",
          "type": "string"
        },
        "region": {
          "title": "Region",
          "description": "模型托管的区域",
          "type": "string"
        },
        "profile": {
          "title": "Profile",
          "description": "要使用的AWS安全配置文件",
          "type": "string"
        },
        "modelArn": {
          "title": "Profile",
          "description": "导入模型的AWS arn",
          "type": "string"
        },
        "contextLength": {
          "title": "Context Length",
          "description": "LLM的最大上下文长度，以标记计数。",
          "default": 2048,
          "type": "integer"
        },
        "maxStopWords": {
          "title": "Max Stop Words",
          "description": "API将接受的最大停止词数。如果您收到有关停止词数量的错误，可以设置此项，但否则应保持未定义。",
          "type": "integer"
        },
        "template": {
          "title": "Template",
          "description": "用于格式化消息的聊天模板。对于大多数模型，这会自动检测，但可以在此处覆盖。如果您使用的是vLLM或其他自动处理提示的服务器，请选择none。",
          "enum": [
            "llama2",
            "alpaca",
            "zephyr",
            "phi2",
            "phind",
            "anthropic",
            "chatml",
            "none",
            "deepseek",
            "openchat",
            "xwin-coder",
            "neural-chat",
            "codellama-70b",
            "llava",
            "gemma",
            "llama3"
          ],
          "type": "string"
        },
        "promptTemplates": {
          "title": "Prompt Templates",
          "markdownDescription": "提示模板名称（'edit'是Continue中唯一使用的）到给定提示模板的字符串的映射。请参阅[此处](https://docs.continue.dev/model-setup/configuration#customizing-the-edit-prompt)获取示例。",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "completionOptions": {
          "title": "Completion Options",
          "description": "完成端点的选项。阅读文档以了解更多关于完成选项的信息。",
          "default": {
            "temperature": null,
            "topP": null,
            "topK": null,
            "presencePenalty": null,
            "frequencyPenalty": null,
            "stop": null,
            "maxTokens": 600
          },
          "allOf": [
            {
              "$ref": "#/definitions/BaseCompletionOptions"
            }
          ]
        },
        "systemMessage": {
          "title": "System Message",
          "description": "LLM将始终遵循的系统消息",
          "type": "string"
        },
        "requestOptions": {
          "title": "Request Options",
          "description": "对LLM的HTTP请求的选项。",
          "default": {
            "timeout": 7200,
            "verifySsl": null,
            "caBundlePath": null,
            "proxy": null,
            "headers": null,
            "extraBodyProperties": null
          },
          "allOf": [
            {
              "$ref": "#/definitions/RequestOptions"
            }
          ]
        },
        "apiType": {
          "title": "Api Type",
          "markdownDescription": "OpenAI API类型，`openai`或`azure`",
          "enum": [
            "openai",
            "azure"
          ]
        },
        "apiVersion": {
          "title": "Api Version",
          "description": "Azure OpenAI API版本（例如2023-07-01-preview）",
          "type": "string"
        },
        "engine": {
          "title": "Engine",
          "description": "Azure OpenAI引擎",
          "type": "string"
        },
        "capabilities": {
          "type": "object",
          "description": "我们将尝试根据模型的标题和提供商自动检测模型的功能，但这可能并不总是准确的。您可以在此处覆盖模型的功能。",
          "properties": {
            "uploadImage": {
              "type": "boolean",
              "description": "指示模型是否可以上传图像。"
            }
          }
        }
      },
      "required": [
        "title",
        "provider",
        "model"
      ],
      "allOf": [
        {
          "if": {
            "properties": {
              "provider": {
                "type": "str"
              }
            },
            "not": {
              "required": [
                "provider"
              ]
            }
          },
          "then": {
            "properties": {
              "model": {
                "description": "首先选择一个提供商，然后将在此处显示模型选项。"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "openai",
                  "anthropic",
                  "cohere",
                  "gemini",
                  "huggingface-inference-api",
                  "replicate",
                  "together",
                  "cloudflare",
                  "sambanova"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "required": [
              "apiKey"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "bedrockimport"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "required": [
              "modelArn"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "huggingface-tgi",
                  "huggingface-inference-api"
                ]
              }
            }
          },
          "then": {
            "required": [
              "apiBase"
            ]
          },
          "required": [
            "provider"
          ]
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "openai"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "engine": {
                "type": "string"
              },
              "apiType": {
                "type": "string"
              },
              "apiVersion": {
                "type": "string"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "cloudflare"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "accountId": {
                "type": "string"
              },
              "aiGatewaySlug": {
                "type": "string"
              },
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "@cf/meta/llama-3-8b-instruct",
                      "@hf/thebloke/deepseek-coder-6.7b-instruct-awq",
                      "@cf/deepseek-ai/deepseek-math-7b-instruct",
                      "@cf/thebloke/discolm-german-7b-v1-awq",
                      "@cf/tiiuae/falcon-7b-instruct",
                      "@cf/google/gemma-2b-it-lora",
                      "@hf/google/gemma-7b-it",
                      "@cf/google/gemma-7b-it-lora",
                      "@hf/nousresearch/hermes-2-pro-mistral-7b",
                      "@cf/meta/llama-2-7b-chat-fp16",
                      "@cf/meta/llama-2-7b-chat-int8",
                      "@cf/meta-llama/llama-2-7b-chat-hf-lora",
                      "@hf/thebloke/llama-2-13b-chat-awq",
                      "@hf/thebloke/llamaguard-7b-awq",
                      "@cf/mistral/mistral-7b-instruct-v0.1",
                      "@hf/mistral/mistral-7b-instruct-v0.2",
                      "@cf/mistral/mistral-7b-instruct-v0.2-lora",
                      "@hf/thebloke/neural-chat-7b-v3-1-awq",
                      "@cf/openchat/openchat-3.5-0106",
                      "@hf/thebloke/openhermes-2.5-mistral-7b-awq",
                      "@cf/microsoft/phi-2",
                      "@cf/qwen/qwen1.5-0.5b-chat",
                      "@cf/qwen/qwen1.5-1.8b-chat",
                      "@cf/qwen/qwen1.5-7b-chat-awq",
                      "@cf/qwen/qwen1.5-14b-chat-awq",
                      "@cf/defog/sqlcoder-7b-2",
                      "@hf/nexusflow/starling-lm-7b-beta",
                      "@cf/tinyllama/tinyllama-1.1b-chat-v1.0",
                      "@hf/thebloke/zephyr-7b-beta-awq",
                      "@hf/thebloke/deepseek-coder-6.7b-base-awq"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "openai"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "gpt-3.5-turbo",
                      "gpt-3.5-turbo-16k",
                      "gpt-4o",
                      "gpt-4o-mini",
                      "gpt-4",
                      "gpt-3.5-turbo-0613",
                      "gpt-4-32k",
                      "gpt-4-0125-preview",
                      "gpt-4-turbo",
                      "AUTODETECT"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "replicate"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "llama3.1-8b",
                      "llama3.1-70b",
                      "llama3.1-405b",
                      "llama3-8b",
                      "llama3-70b",
                      "codellama-7b",
                      "codellama-13b",
                      "codellama-34b",
                      "llama2-7b",
                      "llama2-13b"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "markdownDescription": "选择一个预定义选项，或从Replicate [此处](https://replicate.com/collections/streaming-language-models)找到一个确切的模型ID。"
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "free-trial"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "enum": [
                  "gpt-4o",
                  "codestral-latest",
                  "llama3.1-70b",
                  "llama3.1-405b",
                  "gpt-3.5-turbo",
                  "gemini-pro",
                  "claude-3-5-sonnet-20240620",
                  "claude-3-haiku-20240307",
                  "AUTODETECT"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "openai"
                ]
              },
              "apiType": {
                "not": {
                  "const": "azure"
                }
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "gpt-3.5-turbo",
                      "gpt-3.5-turbo-16k",
                      "gpt-4o",
                      "gpt-4o-mini",
                      "gpt-4",
                      "gpt-3.5-turbo-0613",
                      "gpt-4-32k",
                      "gpt-4-turbo",
                      "gpt-4-vision-preview",
                      "mistral-7b",
                      "mistral-8x7b",
                      "llama2-7b",
                      "llama2-13b",
                      "codellama-7b",
                      "codellama-13b",
                      "codellama-34b",
                      "codellama-70b",
                      "llama3-8b",
                      "llama3-70b",
                      "llama3.1-8b",
                      "llama3.1-70b",
                      "llama3.1-405b",
                      "phind-codellama-34b",
                      "wizardcoder-7b",
                      "wizardcoder-13b",
                      "wizardcoder-34b",
                      "zephyr-7b",
                      "codeup-13b",
                      "deepseek-7b",
                      "deepseek-33b",
                      "neural-chat-7b",
                      "deepseek-1b",
                      "stable-code-3b",
                      "starcoder-1b",
                      "starcoder-3b",
                      "starcoder2-3b",
                      "mistral-tiny",
                      "mistral-small",
                      "mistral-medium",
                      "AUTODETECT"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "anthropic"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "cacheBehavior": {
                "title": "Caching Behavior",
                "description": "提示缓存的选项",
                "properties": {
                  "cacheSystemMessage": {
                    "type": "boolean"
                  },
                  "cacheConversation": {
                    "type": "boolean"
                  }
                }
              },
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "claude-2",
                      "claude-instant-1",
                      "claude-3-5-sonnet-20240620",
                      "claude-3-opus-20240229",
                      "claude-3-sonnet-20240229",
                      "claude-3-haiku-20240307",
                      "claude-2.1"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "cohere"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "enum": [
                  "command-r",
                  "command-r-plus"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "bedrock"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "claude-3-sonnet-20240229",
                      "claude-3-haiku-20240307",
                      "claude-2"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "sagemaker"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "markdownDescription": "SageMaker端点名称"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "gemini"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "cacheBehavior": {
                "title": "Caching Behavior",
                "description": "提示缓存的选项",
                "properties": {
                  "cacheSystemMessage": {
                    "type": "boolean"
                  }
                }
              },
              "model": {
                "enum": [
                  "chat-bison-001",
                  "gemini-pro",
                  "gemini-1.5-pro-latest",
                  "gemini-1.5-pro",
                  "gemini-1.5-flash-latest",
                  "gemini-1.5-flash"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "together"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "mistral-7b",
                      "mistral-8x7b",
                      "llama2-7b",
                      "llama2-13b",
                      "llama3-8b",
                      "llama3-70b",
                      "llama3.1-8b",
                      "llama3.1-70b",
                      "llama3.1-405b",
                      "codellama-7b",
                      "codellama-13b",
                      "codellama-34b",
                      "codellama-70b",
                      "phind-codellama-34b"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ],
                "markdownDescription": "选择一个预定义选项，或从Together AI [此处](https://docs.together.ai/docs/inference-models)找到一个确切的模型字符串。"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "deepinfra"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "markdownDescription": "从DeepInfra [此处](https://deepinfra.com/models?type=text-generation)找到您想使用的模型名称。"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "huggingface-tgi",
                  "huggingface-inference-api",
                  "llama.cpp",
                  "text-gen-webui",
                  "llamafile"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "mistral-7b",
                      "mistral-8x7b",
                      "llama2-7b",
                      "llama2-13b",
                      "codellama-7b",
                      "codellama-13b",
                      "codellama-34b",
                      "codellama-70b",
                      "llama3-8b",
                      "llama3-70b",
                      "llama3.1-8b",
                      "llama3.1-70b",
                      "llama3.1-405b",
                      "phind-codellama-34b",
                      "wizardcoder-7b",
                      "wizardcoder-13b",
                      "wizardcoder-34b",
                      "zephyr-7b",
                      "codeup-13b",
                      "deepseek-7b",
                      "deepseek-33b",
                      "neural-chat-7b",
                      "deepseek-1b",
                      "stable-code-3b",
                      "starcoder-1b",
                      "starcoder-3b",
                      "starcoder2-3b"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "ollama"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "mistral-7b",
                      "llama2-7b",
                      "llama2-13b",
                      "codellama-7b",
                      "codellama-13b",
                      "codellama-34b",
                      "codellama-70b",
                      "llama3-8b",
                      "llama3-70b",
                      "llama3.1-8b",
                      "llama3.1-70b",
                      "llama3.1-405b",
                      "phi-2",
                      "phind-codellama-34b",
                      "wizardcoder-7b",
                      "wizardcoder-13b",
                      "wizardcoder-34b",
                      "zephyr-7b",
                      "codeup-13b",
                      "deepseek-7b",
                      "deepseek-33b",
                      "neural-chat-7b",
                      "deepseek-1b",
                      "stable-code-3b",
                      "starcoder-1b",
                      "starcoder-3b",
                      "starcoder2-3b",
                      "AUTODETECT"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ],
                "markdownDescription": "选择一个预定义选项，或从Ollama模型[此处](https://ollama.ai/library)找到确切的模型标签。"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "mistral"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "enum": [
                  "codestral-latest",
                  "codestral-mamba-latest",
                  "open-mistral-7b",
                  "open-mixtral-8x7b",
                  "open-mixtral-8x22b",
                  "mistral-small-latest",
                  "mistral-large-latest"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "deepseek"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "cacheBehavior": {
                "title": "Caching Behavior",
                "description": "提示缓存的选项",
                "properties": {
                  "cacheSystemMessage": {
                    "type": "boolean"
                  },
                  "cacheConversation": {
                    "type": "boolean"
                  }
                }
              },
              "model": {
                "enum": [
                  "deepseek-chat",
                  "deepseek-coder"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "groq"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "enum": [
                  "llama2-70b",
                  "mistral-8x7b",
                  "gemma",
                  "gemma2",
                  "llama3-8b",
                  "llama3-70b",
                  "llama3.1-8b",
                  "llama3.1-70b",
                  "llama3.1-405b",
                  "AUTODETECT"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "fireworks"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "enum": [
                  "starcoder-7b"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "apiType": {
                "const": "azure"
              }
            },
            "required": [
              "apiType"
            ]
          },
          "then": {
            "required": [
              "engine",
              "apiVersion",
              "apiBase"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "openai"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "useLegacyCompletionsEndpoint": {
                "type": "boolean"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "const": "llamafile"
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "llamafileCommand": {
                "type": "string"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "text-gen-webui"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "streamingUrl": {
                "type": "string"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "flowise"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "timeout": {
                "title": "Timeout",
                "description": "为每个请求设置超时时间。如果您正在运行本地版本的Flowise，可能需要较长时间响应，您可能需要设置此项以避免超时。",
                "default": 5000,
                "type": "integer"
              },
              "additionalHeaders": {
                "description": "额外头信息的列表",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "title": "Key",
                      "description": "头信息键",
                      "type": "string"
                    },
                    "value": {
                      "title": "Value",
                      "description": "头信息值",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "additionalFlowiseConfiguration": {
                "description": "要与`overrideConfig`一起发送的额外属性列表",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "title": "Key",
                      "description": "配置属性键",
                      "type": "string"
                    },
                    "value": {
                      "title": "Value",
                      "description": "配置属性值"
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "gpt-3.5-turbo",
                      "gpt-3.5-turbo-16k",
                      "gpt-4o",
                      "gpt-4o-mini",
                      "gpt-4",
                      "gpt-3.5-turbo-0613",
                      "gpt-4-32k",
                      "gpt-4-turbo",
                      "gpt-4-vision-preview",
                      "mistral-7b",
                      "mistral-8x7b",
                      "llama2-7b",
                      "llama2-13b",
                      "codellama-7b",
                      "codellama-13b",
                      "codellama-34b",
                      "codellama-70b",
                      "llama3-8b",
                      "llama3-70b",
                      "llama3.1-8b",
                      "llama3.1-70b",
                      "llama3.1-405b",
                      "phind-codellama-34b",
                      "wizardcoder-7b",
                      "wizardcoder-13b",
                      "wizardcoder-34b",
                      "zephyr-7b",
                      "codeup-13b",
                      "deepseek-7b",
                      "deepseek-33b",
                      "claude-2",
                      "claude-instant-1",
                      "claude-3-5-sonnet-20240620",
                      "claude-3-opus-20240229",
                      "claude-3-sonnet-20240229",
                      "claude-3-haiku-20240307",
                      "claude-2.1",
                      "command-r",
                      "command-r-plus",
                      "chat-bison-001",
                      "gemini-pro",
                      "gemini-1.5-pro-latest",
                      "gemini-1.5-pro",
                      "gemini-1.5-flash-latest",
                      "gemini-1.5-flash",
                      "mistral-tiny",
                      "mistral-small",
                      "mistral-medium",
                      "deepseek-1b",
                      "stable-code-3b",
                      "starcoder-1b",
                      "starcoder-3b",
                      "starcoder2-3b"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "watsonx"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "watsonxUrl": {
                "type": "string"
              },
              "watsonxApiKey": {
                "type": "string"
              },
              "watsonxApiVersion": {
                "type": "string"
              },
              "watsonxProjectId": {
                "type": "string"
              },
              "watsonxStopToken": {
                "type": "string"
              },
              "watsonxFullUrl": {
                "type": "string"
              },
              "model": {
                "enum": [
                  "ibm/granite-13b-chat-v2",
                  "ibm/granite-20b-code-instruct",
                  "mistralai/mistral-large",
                  "meta-llama/llama-3-8b-instruct",
                  "meta-llama/llama-3-70b-instruct"
                ]
              }
            },
            "required": [
              "watsonxUrl",
              "watsonxProjectId"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "sambanova"
                ]
              }
            },
            "required": [
              "provider"
            ]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "llama3.1-8b",
                      "llama3.1-70b",
                      "llama3.1-405b"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ],
                "markdownDescription": "选择一个预定义选项。"
              }
            }
          }
        }
      ]
    },
    "ModelRoles": {
      "title": "ModelRoles",
      "type": "object",
      "properties": {
        "default": {
          "title": "Default",
          "description": "默认模型。如果未设置其他模型角色，它们将回退到默认。",
          "type": "string"
        },
        "chat": {
          "title": "Chat",
          "description": "用于聊天的模型。如果未设置，将回退到默认。",
          "type": "string"
        },
        "edit": {
          "title": "Edit",
          "description": "用于编辑的模型。如果未设置，将回退到默认。",
          "type": "string"
        },
        "summarize": {
          "title": "Summarize",
          "description": "用于总结的模型。如果未设置，将回退到默认。",
          "type": "string"
        }
      },
      "required": [
        "default"
      ]
    },
    "SlashCommand": {
      "title": "SlashCommand",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "anyOf": [
            {
              "enum": [
                "issue",
                "share",
                "so",
                "cmd",
                "edit",
                "comment",
                "http",
                "commit",
                "review"
              ],
              "type": "string",
              "markdownEnumDescriptions": [
                "生成链接到草拟的GitHub问题",
                "将当前聊天会话导出为markdown",
                "引用StackOverflow回答问题",
                "生成终端命令并将其粘贴到终端",
                "根据给定指令编辑突出显示的代码",
                "为突出显示的代码添加注释",
                "在您自己的HTTP端点上编写自定义斜杠命令。在params对象中设置您已设置的端点的'url'。",
                "为当前更改生成提交消息",
                "审查代码并提供反馈"
              ]
            },
            {
              "type": "string"
            }
          ]
        },
        "description": {
          "title": "Description",
          "type": "string"
        },
        "step": {
          "title": "Step",
          "description": "此属性不再需要且无效。要使用内置斜杠命令，请将'name'属性设置为预配置选项之一。",
          "type": "string"
        },
        "params": {
          "title": "Params",
          "default": {},
          "type": "object"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "issue"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "repositoryUrl": {
                    "type": "string",
                    "description": "输入您要为其生成问题的GitHub存储库的URL。"
                  }
                },
                "required": [
                  "repositoryUrl"
                ]
              }
            },
            "required": [
              "params"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "edit"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "recap": {
                    "type": "boolean",
                    "markdownDescription": "如果recap设置为`true`，Continue将在进行编辑后生成更改的摘要。"
                  },
                  "tokenLimit": {
                    "type": "integer",
                    "markdownDescription": "默认情况下，Continue不允许您编辑超大范围（超过1,200个标记），因为LLM不太可能成功。但如果您愿意在可能失败的情况下覆盖此限制，可以在此处设置。"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "share"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "outputDir": {
                    "type": "string",
                    "markdownDescription": "如果outputDir设置为`.`或以`./`或`.\\`开头，文件将保存到当前工作区或其子目录中。`~`同样可以用于指定用户的主目录。"
                  }
                }
              }
            }
          }
        }
      ],
      "required": [
        "name",
        "description"
      ]
    },
    "CustomCommand": {
      "title": "CustomCommand",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "prompt": {
          "title": "Prompt",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string"
        }
      },
      "required": [
        "name",
        "prompt",
        "description"
      ]
    },
    "ContextProviderWithParams": {
      "title": "ContextProviderWithParams",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "anyOf": [
            {
              "enum": [
                "diff",
                "terminal",
                "locals",
                "open",
                "google",
                "search",
                "http",
                "codebase",
                "problems",
                "folder",
                "issue",
                "docs",
                "tree",
                "highlights",
                "outline",
                "postgres",
                "code",
                "currentFile",
                "url",
                "database",
                "os",
                "repo-map",
                "greptile"
              ],
              "markdownEnumDescriptions": [
                "引用`git diff`给出的当前更改内容",
                "引用终端的内容",
                "引用具有调用堆栈的前n级（默认为3）的局部变量的内容",
                "引用所有打开或固定的文件的内容。",
                "输入搜索短语并将Google搜索结果作为上下文包含",
                "引用代码库中的ripgrep搜索结果",
                "在您自己的HTTP端点上编写自定义上下文提供者。在params对象中设置您已设置的端点的'url'。",
                "使用嵌入自动查找整个代码库中的相关文件",
                "引用当前打开文件中的所有linting错误和警告",
                "从文件夹中包含重要文件作为提示，由相似性搜索确定",
                "引用存储库中的GitHub问题",
                "检索文档网站中的重要页面，由相似性搜索确定",
                "显示当前工作区的文件树",
                "包含代码中的重要突出显示部分",
                "包含显示重要代码对象的存储库地图",
                "引用Postgres表架构和示例行",
                "引用整个代码库中的特定函数和类",
                "引用当前活动文件的内容",
                "引用URL页面的内容",
                "引用表架构",
                "操作系统和CPU信息",
                "存储库中文件的地图，显示重要代码突出显示",
                "查询您当前存储库的greptile索引"
              ],
              "type": "string"
            },
            {
              "type": "string"
            }
          ]
        },
        "params": {
          "title": "Params",
          "default": {},
          "type": "object"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "google"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "serperApiKey": {
                    "type": "string",
                    "description": "您的API密钥，用于https://serper.dev以获取Google搜索结果"
                  }
                },
                "required": [
                  "serperApiKey"
                ]
              }
            },
            "required": [
              "params"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "open"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "onlyPinned": {
                    "type": "boolean",
                    "description": "如果设置为true，则仅包含“固定”文件。",
                    "default": false
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "issue"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "githubToken": {
                    "type": "string",
                    "description": "您的GitHub令牌，用于访问GitHub API。私有存储库需要。"
                  },
                  "repos": {
                    "type": "array",
                    "description": "要搜索问题的存储库列表",
                    "items": {
                      "type": "object",
                      "properties": {
                        "owner": {
                          "type": "string",
                          "description": "存储库的所有者"
                        },
                        "repo": {
                          "type": "string",
                          "description": "存储库的名称"
                        },
                        "type": {
                          "type": "string",
                          "description": "要搜索的问题类型",
                          "enum": [
                            "open",
                            "closed",
                            "all"
                          ]
                        }
                      },
                      "required": [
                        "owner",
                        "repo"
                      ]
                    }
                  }
                },
                "required": [
                  "repos"
                ]
              }
            },
            "required": [
              "params"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "database"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "connections": {
                    "type": "array",
                    "description": "数据库连接列表",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "此数据库连接的唯一名称"
                        },
                        "connection_type": {
                          "type": "string",
                          "description": "数据库类型（例如，'postgres'，'mysql'）",
                          "enum": [
                            "postgres",
                            "mysql",
                            "sqlite"
                          ]
                        },
                        "connection": {
                          "type": "object",
                          "properties": {
                            "user": {
                              "type": "string",
                              "description": "数据库用户名"
                            },
                            "host": {
                              "type": "string",
                              "description": "数据库服务器的主机地址"
                            },
                            "database": {
                              "type": "string",
                              "description": "要连接的数据库名称"
                            },
                            "password": {
                              "type": "string",
                              "description": "数据库用户的密码"
                            },
                            "port": {
                              "type": "integer",
                              "description": "连接到主机的端口号"
                            },
                            "filename": {
                              "type": "string",
                              "description": "简单文件数据库的文件位置"
                            }
                          },
                          "required": []
                        }
                      },
                      "required": [
                        "name",
                        "connection_type",
                        "connection"
                      ]
                    }
                  }
                },
                "required": [
                  "connections"
                ]
              }
            },
            "required": [
              "params"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "gitlab-mr"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "您的GitLab域名，默认为gitlab.com"
                  },
                  "token": {
                    "type": "string",
                    "description": "您的私人访问令牌。"
                  },
                  "filterComments": {
                    "type": "boolean",
                    "description": "如果您选择了代码，则过滤掉与选择无关的评论。"
                  }
                },
                "required": [
                  "token"
                ]
              }
            },
            "required": [
              "params"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "jira"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "您的Jira域名，例如company.atlassian.net。"
                  },
                  "email": {
                    "type": "string",
                    "description": "您登录Jira的电子邮件"
                  },
                  "token": {
                    "type": "string",
                    "description": "您的atlassian API令牌，来自https://id.atlassian.com/manage-profile/security/api-tokens"
                  },
                  "issueQuery": {
                    "type": "string",
                    "description": "自定义用于查找Jira问题的查询"
                  },
                  "apiVersion": {
                    "type": "integer",
                    "markdownDescription": "此上下文提供者支持Jira API版本2和3。默认情况下，它将使用版本3，因为这是云版本使用的，但如果您有Jira的数据中心版本，您需要使用`apiVersion`属性将API版本设置为2。"
                  },
                  "requestOptions": {
                    "title": "Request Options",
                    "description": "对Jira的HTTPS请求的选项。",
                    "default": {
                      "timeout": 7200,
                      "verifySsl": null,
                      "caBundlePath": null,
                      "proxy": null,
                      "headers": null,
                      "extraBodyProperties": null
                    },
                    "allOf": [
                      {
                        "$ref": "#/definitions/RequestOptions"
                      }
                    ]
                  }
                },
                "required": [
                  "domain",
                  "token"
                ]
              }
            },
            "required": [
              "params"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "http"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "您的上下文提供者服务器的HTTP端点。"
                  }
                },
                "required": [
                  "url"
                ]
              }
            },
            "required": [
              "params"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "codebase",
                  "folder"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "nRetrieve": {
                    "title": "N Retrieve",
                    "description": "从向量数据库中初始检索的结果数量",
                    "default": 50,
                    "type": "integer"
                  },
                  "nFinal": {
                    "title": "N Final",
                    "description": "重新排序后使用的最终结果数量",
                    "default": 10,
                    "type": "integer"
                  },
                  "useReranking": {
                    "title": "Use Reranking",
                    "description": "是否使用重新排序，这将允许初始选择nRetrieve结果，然后将使用LLM选择前nFinal结果。禁用重新排序将提供更快但不太准确的结果。",
                    "default": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "postgres"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "host": {
                    "title": "Host",
                    "description": "数据库主机",
                    "default": "localhost",
                    "type": "string"
                  },
                  "port": {
                    "title": "Port",
                    "description": "数据库端口",
                    "default": 5432,
                    "type": "integer"
                  },
                  "user": {
                    "title": "User",
                    "description": "数据库用户",
                    "default": "postgres",
                    "type": "string"
                  },
                  "password": {
                    "title": "Password",
                    "description": "数据库密码",
                    "type": "string"
                  },
                  "database": {
                    "title": "Database",
                    "description": "数据库名称",
                    "default": "postgres",
                    "type": "string"
                  },
                  "schema": {
                    "title": "Schema",
                    "description": "数据库架构",
                    "default": "public",
                    "type": "string"
                  },
                  "sampleRows": {
                    "title": "Sample Rows",
                    "description": "从数据库中采样的行数",
                    "default": 3,
                    "type": "integer"
                  }
                }
              }
            },
            "required": [
              "host",
              "port",
              "user",
              "password",
              "database"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "enum": [
                  "greptile"
                ]
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "properties": {
                  "GithubToken": {
                    "title": "GithubToken",
                    "description": "您的github访问令牌",
                    "default": "",
                    "type": "string"
                  },
                  "GreptileToken": {
                    "title": "GreptileToken",
                    "description": "您的greptile访问令牌",
                    "default": "",
                    "type": "string"
                  }
                }
              }
            },
            "required": [
              "GreptileToken",
              "GithubToken"
            ]
          }
        }
      ],
      "required": [
        "name"
      ]
    },
    "SerializedContinueConfig": {
      "title": "config.json",
      "type": "object",
      "properties": {
        "docs": {
          "title": "Docs",
          "description": "要索引的文档站点列表",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "文档站点的标题"
              },
              "startUrl": {
                "type": "string",
                "description": "索引文档的起始URL"
              },
              "rootUrl": {
                "type": "string",
                "description": "文档站点的根URL"
              },
              "maxDepth": {
                "type": "integer",
                "description": "爬取文档站点的最大深度"
              },
              "favicon": {
                "type": "string",
                "description": "站点的favicon的URL路径 - 默认情况下，它将是起始URL的`/favicon.ico`路径"
              }
            },
            "required": [
              "title",
              "startUrl"
            ]
          }
        },
        "allowAnonymousTelemetry": {
          "title": "Allow Anonymous Telemetry",
          "markdownDescription": "如果此字段设置为True，我们将收集匿名遥测数据，如文档页面中关于遥测的描述。如果设置为`false`，我们将不收集任何数据。了解更多信息，请参阅[文档](https://docs.continue.dev/telemetry)。",
          "default": true,
          "type": "boolean"
        },
        "models": {
          "title": "Models",
          "markdownDescription": "了解如何在[文档](https://docs.continue.dev/model-setup/overview)中设置模型。",
          "default": [
            {
              "title": "GPT-4 (trial)",
              "provider": "free-trial",
              "model": "gpt-4",
              "apiKey": ""
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelDescription"
          }
        },
        "systemMessage": {
          "title": "System Message",
          "description": "LLM将始终遵循的系统消息",
          "type": "string"
        },
        "completionOptions": {
          "title": "Completion Options",
          "description": "完成的默认选项。这些将被任何特定模型设置的选项覆盖。",
          "default": {
            "temperature": null,
            "topP": null,
            "topK": null,
            "presencePenalty": null,
            "frequencyPenalty": null,
            "stop": null,
            "maxTokens": 600
          },
          "allOf": [
            {
              "$ref": "#/definitions/BaseCompletionOptions"
            }
          ]
        },
        "requestOptions": {
          "title": "Request Options",
          "description": "从模型和上下文提供者进行的所有获取请求的默认请求选项。这些将被任何特定模型的请求选项覆盖。",
          "allOf": [
            {
              "$ref": "#/definitions/RequestOptions"
            }
          ]
        },
        "slashCommands": {
          "title": "Slash Commands",
          "markdownDescription": "一组斜杠命令，允许您从侧边栏执行自定义操作。了解更多信息，请参阅[文档](https://docs.continue.dev/customization/slash-commands)。",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlashCommand"
          }
        },
        "customCommands": {
          "title": "Custom Commands",
          "markdownDescription": "一组自定义命令，允许您重用提示。每个命令都有名称、描述和提示属性。当您在文本输入中输入/<name>时，它将作为提示的快捷方式。了解更多信息，请参阅[文档](https://docs.continue.dev/customization/slash-commands#custom-commands-use-natural-language)。",
          "default": [
            {
              "name": "test",
              "prompt": "{{{ input }}}\n\n为所选代码编写一套全面的单元测试。它应设置、运行测试以检查正确性，包括重要的边界情况，并拆除。确保测试完整且复杂。仅以聊天输出的形式给出测试，不要编辑任何文件。",
              "description": "这是一个示例自定义命令。打开config.json进行编辑并创建更多"
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomCommand"
          }
        },
        "contextProviders": {
          "title": "Context Providers",
          "markdownDescription": "一组ContextProvider对象，可用于通过键入'@'为LLM提供上下文。阅读更多关于ContextProviders的信息，请参阅[文档](https://docs.continue.dev/customization/context-providers)。",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContextProviderWithParams"
          }
        },
        "userToken": {
          "title": "User Token",
          "description": "用于标识用户的可选令牌。",
          "type": "string"
        },
        "disableIndexing": {
          "title": "Disable Indexing",
          "markdownDescription": "如果设置为`true`，Continue将不会索引代码库。这主要用于调试目的。",
          "default": false,
          "type": "boolean"
        },
        "disableSessionTitles": {
          "title": "Disable Session Titles",
          "markdownDescription": "如果设置为`true`，Continue将不会向LLM发出额外请求以生成每个会话的摘要标题。",
          "default": false,
          "type": "boolean"
        },
        "embeddingsProvider": {
          "title": "Embeddings Provider",
          "markdownDescription": "用于生成代码库嵌入的方法。默认是transformers.js，它将在浏览器中本地运行。了解其他选项，请参阅[此处](https://docs.continue.dev/features/codebase-embeddings#embeddings-providers)。",
          "type": "object",
          "properties": {
            "provider": {
              "enum": [
                "huggingface-tei",
                "transformers.js",
                "ollama",
                "openai",
                "cohere",
                "free-trial",
                "gemini",
                "voyage",
                "nvidia",
                "bedrock"
              ]
            },
            "model": {
              "type": "string"
            },
            "apiKey": {
              "type": "string"
            },
            "apiBase": {
              "type": "string"
            },
            "requestOptions": {
              "title": "Request Options",
              "description": "嵌入提供者进行的任何获取请求中使用的请求选项",
            "$ref": "#/definitions/RequestOptions"
          },
          "maxChunkSize": {
            "title": "Maximum Chunk Size",
            "description": "每个文档块允许的最大标记数",
            "type": "integer",
            "minimum": 128,
            "exclusiveMaximum": 2147483647
          },
          "maxBatchSize": {
            "title": "Maximum Batch Size",
            "description": "在单个请求中可以发送给嵌入提供者的最大块数",
            "type": "integer",
            "minimum": 1,
            "exclusiveMaximum": 2147483647
          },
          "region": {
            "title": "Region",
            "description": "模型托管的区域",
            "type": "string"
          },
          "profile": {
            "title": "Profile",
            "description": "要使用的AWS安全配置文件",
            "type": "string"
          }
        },
        "required": [
          "provider"
        ],
        "allOf": [
          {
            "if": {
              "properties": {
                "provider": {
                  "enum": [
                    "cohere",
                    "voyage",
                    "nvidia",
                    "gemini"
                  ]
                }
              },
              "required": [
                "provider"
              ]
            },
            "then": {
              "required": [
                "apiKey"
              ]
            }
          }
        ]
      },
      "reranker": {
        "title": "Reranker",
        "markdownDescription": "重新排序器负责在从代码库中检索片段时选择最终结果。",
        "type": "object",
        "properties": {
          "name": {
            "enum": [
              "cohere",
              "voyage",
              "llm",
              "free-trial",
              "huggingface-tei"
            ]
          },
          "params": {
            "type": "object"
          }
        },
        "required": [
          "name"
        ],
        "allOf": [
          {
            "if": {
              "properties": {
                "name": {
                  "enum": [
                    "cohere"
                  ]
                }
              },
              "required": [
                "name"
              ]
            },
            "then": {
              "properties": {
                "params": {
                  "type": "object",
                  "properties": {
                    "model": {
                      "enum": [
                        "rerank-english-v3.0",
                        "rerank-multilingual-v3.0",
                        "rerank-english-v2.0",
                        "rerank-multilingual-v2.0"
                      ]
                    },
                    "apiBase": {
                      "type": "string"
                    },
                    "apiKey": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "name": {
                  "enum": [
                    "llm"
                  ]
                }
              },
              "required": [
                "name"
              ]
            },
            "then": {
              "properties": {
                "params": {
                  "type": "object",
                  "properties": {
                    "modelTitle": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "modelTitle"
                  ]
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "name": {
                  "enum": [
                    "voyage"
                  ]
                }
              },
              "required": [
                "name"
              ]
            },
            "then": {
              "properties": {
                "params": {
                  "type": "object",
                  "properties": {
                    "apiKey": {
                      "type": "string"
                    },
                    "model": {
                      "enum": [
                        "rerank-lite-1",
                        "rerank-1"
                      ]
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "name": {
                  "enum": [
                    "huggingface-tei"
                  ]
                }
              },
              "required": [
                "name"
              ]
            },
            "then": {
              "properties": {
                "params": {
                  "type": "object",
                  "properties": {
                    "apiBase": {
                      "type": "string",
                      "default": "http://localhost:8080"
                    },
                    "truncate": {
                      "type": "boolean",
                      "description": "是否将长序列截断到最大允许的上下文长度。",
                      "default": false
                    },
                    "truncation_direction": {
                      "enum": [
                        "Right",
                        "Left"
                      ],
                      "markdownDescription": "是否从`left`或`right`截断序列。",
                      "default": "Right"
                    }
                  },
                  "required": [
                    "apiBase"
                  ]
                }
              },
              "if": {
                "properties": {
                  "truncate": {
                    "const": true
                  }
                }
              },
              "then": {
                "required": [
                  "truncation_direction"
                ]
              }
            }
          }
        ]
      },
      "tabAutocompleteModel": {
        "title": "Tab Autocomplete Model",
        "markdownDescription": "用于标签自动完成的模型。如果未定义，Continue将默认使用本地Ollama实例上的starcoder2:3b。\n\n*重要*：\n\n如果您使用自定义模型，请确保它是为中间填充完成训练的模型。指令模型通常不适合自动完成，您可能会收到不满意的完成。",
        "default": {
          "title": "Tab Autocomplete Model",
          "provider": "ollama",
          "model": "deepseek-coder:1.3b-base"
        },
        "oneOf": [
          {
            "$ref": "#/definitions/ModelDescription"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ModelDescription"
            }
          }
        ]
      },
      "tabAutocompleteOptions": {
        "title": "TabAutocompleteOptions",
        "type": "object",
        "markdownDescription": "这些选项让您可以自定义标签自动完成体验。阅读所有选项的文档，请参阅[文档](https://docs.continue.dev/features/tab-autocomplete#configuration-options)。",
        "properties": {
          "disable": {
            "type": "boolean",
            "description": "禁用标签自动完成。这也可以从IDE设置中完成。",
            "default": false
          },
          "useCopyBuffer": {
            "type": "boolean",
            "description": "确定在构建提示时是否考虑复制缓冲区。"
          },
          "useFileSuffix": {
            "type": "boolean",
            "description": "确定是否在提示中使用文件后缀。"
          },
          "maxPromptTokens": {
            "type": "number",
            "description": "要使用的最大提示标记数。较小的数字将产生更快的完成，但上下文较少。"
          },
          "debounceDelay": {
            "type": "number",
            "description": "在击键后触发自动完成之前的延迟（以毫秒为单位）。"
          },
          "maxSuffixPercentage": {
            "type": "number",
            "description": "提示中可以用于后缀的最大百分比。"
          },
          "prefixPercentage": {
            "type": "number",
            "description": "输入中应用于前缀的百分比。"
          },
          "template": {
            "type": "string",
            "description": "用于自动完成的可选模板字符串。它将使用Mustache模板语言进行渲染，并传递'prefix'和'suffix'变量。"
          },
          "multilineCompletions": {
            "enum": [
              "always",
              "never",
              "auto"
            ],
            "description": "如果设置为true，Continue将仅一次完成一行。"
          },
          "useCache": {
            "type": "boolean",
            "description": "是否缓存完成"
          },
          "onlyMyCode": {
            "type": "boolean",
            "description": "如果设置为true，Continue将不包括任何定义的代码片段，除非它们在您的存储库中"
          },
          "useOtherFiles": {
            "type": "boolean",
            "description": "默认为true。如果设置为false，Continue将不会尝试包括其他文件中的片段。"
          },
          "disableInFiles": {
            "description": "禁用标签自动完成的文件/全局模式列表。例如，如果您想在.csv文件中禁用自动完成，请使用*.csv。",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": []
      },
      "ui": {
        "type": "object",
        "properties": {
          "codeBlockToolbarPosition": {
            "enum": [
              "top",
              "bottom"
            ],
            "default": "top",
            "description": "是否在侧边栏的代码块顶部或底部显示复制和应用代码按钮。"
          },
          "fontSize": {
            "type": "number"
          },
          "displayRawMarkdown": {
            "type": "boolean",
            "description": "如果设置为true，我们将以原始markdown格式显示模型输出。",
            "default": false
          },
          "showChatScrollbar": {
            "title": "Show Chat Scrollbar",
            "markdownDescription": "如果设置为`true`，将在聊天窗口中显示滚动条以浏览消息。",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "analytics": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "posthog",
              "logstash"
            ],
            "description": "要使用的第三方分析提供商。",
            "default": "posthog",
            "markdownEnumDescriptions": [
              "### Posthog\n要使用Posthog，请设置一个帐户，获取您的客户端密钥，并在客户端密钥字段中输入它。",
              "### Logstash\nContinue的Logstash集成使用指定URL的TCP输入"
            ]
          },
          "url": {
            "type": "string",
            "description": "将发送分析的URL"
          },
          "clientKey": {
            "type": "string",
            "description": "用于分析的客户端密钥"
          }
        },
        "required": [
          "provider"
        ],
        "allOf": [
          {
            "if": {
              "properties": {
                "provider": {
                  "enum": [
                    "posthog"
                  ]
                }
              }
            },
            "then": {
              "required": [
                "clientKey"
              ]
            }
          },
          {
            "if": {
              "properties": {
                "provider": {
                  "enum": [
                    "logstash"
                  ]
                }
              }
            },
            "then": {
              "required": [
                "url"
              ]
            }
          }
        ]
      },
      "experimental": {
        "type": "object",
        "title": "Experimental",
        "description": "实验性属性可能会发生变化。",
        "properties": {
          "defaultContext": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/ContextProviderWithParams"
                },
                {
                  "properties": {
                    "query": {
                      "type": "string",
                      "description": "某些上下文提供者所需的，例如'url'以指定输入，或选择下拉项。"
                    }
                  }
                }
              ]
            }
          },
          "modelRoles": {
            "type": "object",
            "properties": {
              "inlineEdit": {
                "description": "您希望用于内联编辑的模型的'title'属性",
                "type": "string"
              },
              "applyCodeBlock": {
                "description": "您希望用于应用代码块的模型的'title'属性",
                "type": "string"
              },
              "repoMapFileSelection": {
                "description": "您希望用于存储库映射文件选择的模型的'title'属性",
                "type": "string"
              }
            }
          },
          "readResponseTTS": {
            "type": "boolean",
            "default": true,
            "description": "使用系统TTS模型自动朗读LLM聊天响应"
          },
          "promptPath": {
            "type": "string"
          },
          "quickActions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "将在代码镜头中显示的快速操作的标题。"
                },
                "prompt": {
                  "type": "string",
                  "description": "当快速操作被调用时，将发送给模型的提示，与函数或类体连接。"
                },
                "sendToChat": {
                  "type": "boolean",
                  "description": "如果为true，快速操作的结果将发送到聊天面板。如果为false，流式结果将插入到文档中。",
                  "default": false
                }
              },
              "required": [
                "prompt",
                "title"
              ]
            },
            "description": "快速操作是一种在函数和类声明的代码镜头中添加自定义命令的方法。"
          },
          "contextMenuPrompts": {
            "type": "object",
            "properties": {
              "comment": {
                "type": "string",
                "default": "为此代码编写注释。不要更改代码本身的任何内容。"
              },
              "docstring": {
                "type": "string",
                "default": "为此代码编写文档字符串。不要更改代码本身的任何内容。"
              },
              "fix": {
                "type": "string",
                "default": "修复此代码"
              },
              "optimize": {
                "type": "string",
                "default": "优化此代码"
              },
              "fixGrammar": {
                "type": "string",
                "default": "如果此写作中有任何语法或拼写错误，请修复它们。不要对写作进行其他大的更改。"
              }
            }
          }
        }
      },
      "mergeBehavior": {
        "type": "string",
        "enum": [
          "merge",
          "overwrite"
        ],
        "default": "merge",
        "title": "Merge behavior",
        "markdownDescription": "如果设置为'merge'，.continuerc.json将应用于config.json之上（数组和对象将合并）。如果设置为'overwrite'，则.continuerc.json的每个顶级属性将覆盖config.json中的该属性。"
      }
    }
  }
}